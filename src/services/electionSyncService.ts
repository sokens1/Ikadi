import { supabase } from '@/lib/supabase';
import { calculateElectionTotalVoters, updateElectionTotalVoters } from '@/utils/electionCalculations';

/**
 * Service de synchronisation automatique des √©lections
 * Met √† jour constamment le nombre d'√©lecteurs des √©lections
 */
class ElectionSyncService {
  private syncInterval: NodeJS.Timeout | null = null;
  private isRunning = false;
  private readonly SYNC_INTERVAL = 30000; // 30 secondes

  /**
   * D√©marrer la synchronisation automatique
   */
  start() {
    if (this.isRunning) {
      console.log('üîÑ Service de synchronisation d√©j√† en cours');
      return;
    }

    console.log('üöÄ D√©marrage du service de synchronisation des √©lections');
    this.isRunning = true;

    // Synchronisation imm√©diate
    this.syncAllElections();

    // Synchronisation p√©riodique
    this.syncInterval = setInterval(() => {
      this.syncAllElections();
    }, this.SYNC_INTERVAL);
  }

  /**
   * Arr√™ter la synchronisation automatique
   */
  stop() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
    this.isRunning = false;
    console.log('‚èπÔ∏è Service de synchronisation arr√™t√©');
  }

  /**
   * Synchroniser toutes les √©lections
   */
  private async syncAllElections() {
    try {
      console.log('üîÑ Synchronisation automatique des √©lections...');
      
      // R√©cup√©rer toutes les √©lections
      const { data: elections, error } = await supabase
        .from('elections')
        .select('id, title, nb_electeurs');

      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des √©lections:', error);
        return;
      }

      if (!elections || elections.length === 0) {
        console.log('‚ÑπÔ∏è Aucune √©lection √† synchroniser');
        return;
      }

      let updatedCount = 0;

      // Synchroniser chaque √©lection
      for (const election of elections) {
        try {
          // Calculer le nombre d'√©lecteurs r√©el
          const realVoters = await calculateElectionTotalVoters(election.id);
          
          // V√©rifier si une mise √† jour est n√©cessaire
          if (realVoters !== election.nb_electeurs) {
            await updateElectionTotalVoters(election.id);
            updatedCount++;
            console.log(`‚úÖ √âlection "${election.title}" mise √† jour: ${election.nb_electeurs} ‚Üí ${realVoters} √©lecteurs`);
          }
        } catch (error) {
          console.error(`‚ùå Erreur lors de la synchronisation de l'√©lection ${election.id}:`, error);
        }
      }

      if (updatedCount > 0) {
        console.log(`‚úÖ Synchronisation termin√©e: ${updatedCount} √©lection(s) mise(s) √† jour`);
      } else {
        console.log('‚úÖ Synchronisation termin√©e: Aucune mise √† jour n√©cessaire');
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation automatique:', error);
    }
  }

  /**
   * Synchroniser une √©lection sp√©cifique
   */
  async syncElection(electionId: string) {
    try {
      console.log(`üîÑ Synchronisation de l'√©lection ${electionId}...`);
      await updateElectionTotalVoters(electionId);
      console.log(`‚úÖ √âlection ${electionId} synchronis√©e`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la synchronisation de l'√©lection ${electionId}:`, error);
    }
  }

  /**
   * V√©rifier si le service est en cours d'ex√©cution
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      interval: this.SYNC_INTERVAL
    };
  }
}

// Instance singleton
export const electionSyncService = new ElectionSyncService();

// D√©marrer automatiquement le service
if (typeof window !== 'undefined') {
  electionSyncService.start();
}

